use crate::show::FloatingDmxValue;

#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Debug, Clone, Default)]
pub struct DimmerPreset {
    pub dimmer: FloatingDmxValue,
}

// #[derive(serde::Serialize, serde::Deserialize)]
// #[derive(Debug, Clone, Default)]
// pub struct PositionPreset {
//     pub pan: FloatingDmxValue,
//     pub tilt: FloatingDmxValue,
//     pub pan_tilt_distance: FloatingDmxValue,
//     pub pan_rotate: FloatingDmxValue,
//     pub tilt_rotate: FloatingDmxValue,
//     pub position_effect: FloatingDmxValue,
//     pub position_effect_rate: FloatingDmxValue,
//     pub position_effect_fade: FloatingDmxValue,

//     pub xyz_x: FloatingDmxValue,
//     pub xyz_y: FloatingDmxValue,
//     pub xyz_z: FloatingDmxValue,
//     pub xyz_flip: FloatingDmxValue,

//     pub rot_x: FloatingDmxValue,
//     pub rot_y: FloatingDmxValue,
//     pub rot_z: FloatingDmxValue,

//     pub scale_x: FloatingDmxValue,
//     pub scale_y: FloatingDmxValue,
//     pub scale_z: FloatingDmxValue,

//     pub scale_xyz: FloatingDmxValue,
// }

// #[derive(serde::Serialize, serde::Deserialize)]
// #[derive(Debug, Clone, Default)]
// pub struct GoboPreset {
//     pub gobo_1: FloatingDmxValue,
//     pub gobo_1_select_spin: FloatingDmxValue,
//     pub gobo_1_select_shake: FloatingDmxValue,
//     pub gobo_1_select_effects: FloatingDmxValue,
//     pub gobo_1_wheel_index: FloatingDmxValue,
//     pub gobo_1_wheel_spin: FloatingDmxValue,
//     pub gobo_1_wheel_shake: FloatingDmxValue,
//     pub gobo_1_wheel_random: FloatingDmxValue,
//     pub gobo_1_wheel_audio: FloatingDmxValue,
//     pub gobo_1_pos: FloatingDmxValue,
//     pub gobo_1_pos_rotate: FloatingDmxValue,
//     pub gobo_1_pos_shake: FloatingDmxValue,

//     pub gobo_2: FloatingDmxValue,
//     pub gobo_2_select_spin: FloatingDmxValue,
//     pub gobo_2_select_shake: FloatingDmxValue,
//     pub gobo_2_select_effects: FloatingDmxValue,
//     pub gobo_2_wheel_index: FloatingDmxValue,
//     pub gobo_2_wheel_spin: FloatingDmxValue,
//     pub gobo_2_wheel_shake: FloatingDmxValue,
//     pub gobo_2_wheel_random: FloatingDmxValue,
//     pub gobo_2_wheel_audio: FloatingDmxValue,
//     pub gobo_2_pos: FloatingDmxValue,
//     pub gobo_2_pos_rotate: FloatingDmxValue,
//     pub gobo_2_pos_shake: FloatingDmxValue,

//     pub gobo_3: FloatingDmxValue,
//     pub gobo_3_select_spin: FloatingDmxValue,
//     pub gobo_3_select_shake: FloatingDmxValue,
//     pub gobo_3_select_effects: FloatingDmxValue,
//     pub gobo_3_wheel_index: FloatingDmxValue,
//     pub gobo_3_wheel_spin: FloatingDmxValue,
//     pub gobo_3_wheel_shake: FloatingDmxValue,
//     pub gobo_3_wheel_random: FloatingDmxValue,
//     pub gobo_3_wheel_audio: FloatingDmxValue,
//     pub gobo_3_pos: FloatingDmxValue,
//     pub gobo_3_pos_rotate: FloatingDmxValue,
//     pub gobo_3_pos_shake: FloatingDmxValue,

//     pub animation_wheel1: FloatingDmxValue,
//     pub animation_wheel1_audio: FloatingDmxValue,
//     pub animation_wheel1_macro: FloatingDmxValue,
//     pub animation_wheel1_random: FloatingDmxValue,
//     pub animation_wheel1_select_effects: FloatingDmxValue,
//     pub animation_wheel1_select_shake: FloatingDmxValue,
//     pub animation_wheel1_select_spin: FloatingDmxValue,
//     pub animation_wheel1_pos: FloatingDmxValue,
//     pub animation_wheel1_pos_rotate: FloatingDmxValue,
//     pub animation_wheel1_pos_shake: FloatingDmxValue,
//     pub animation_system1: FloatingDmxValue,
//     pub animation_system1_ramp: FloatingDmxValue,
//     pub animation_system1_shake: FloatingDmxValue,
//     pub animation_system1_audio: FloatingDmxValue,
//     pub animation_system1_random: FloatingDmxValue,
//     pub animation_system1_pos: FloatingDmxValue,
//     pub animation_system1_pos_rotate: FloatingDmxValue,
//     pub animation_system1_pos_shake: FloatingDmxValue,
//     pub animation_system1_pos_random: FloatingDmxValue,
//     pub animation_system1_pos_audio: FloatingDmxValue,
//     pub animation_system1_macro: FloatingDmxValue,
// }

// #[derive(serde::Serialize, serde::Deserialize)]
// #[derive(Debug, Clone, Default)]
// pub struct ColorPreset {
//     pub color_effects1: FloatingDmxValue,
//     pub color1: FloatingDmxValue,
//     pub color1_wheel_index: FloatingDmxValue,
//     pub color1_wheel_spin: FloatingDmxValue,
//     pub color1_wheel_random: FloatingDmxValue,
//     pub color1_wheel_audio: FloatingDmxValue,

//     pub color_effects2: FloatingDmxValue,
//     pub color2: FloatingDmxValue,
//     pub color2_wheel_index: FloatingDmxValue,
//     pub color2_wheel_spin: FloatingDmxValue,
//     pub color2_wheel_random: FloatingDmxValue,
//     pub color2_wheel_audio: FloatingDmxValue,

//     pub color_effects3: FloatingDmxValue,
//     pub color3: FloatingDmxValue,
//     pub color3_wheel_index: FloatingDmxValue,
//     pub color3_wheel_spin: FloatingDmxValue,
//     pub color3_wheel_random: FloatingDmxValue,
//     pub color3_wheel_audio: FloatingDmxValue,

//     pub color_effects4: FloatingDmxValue,
//     pub color4: FloatingDmxValue,
//     pub color4_wheel_index: FloatingDmxValue,
//     pub color4_wheel_spin: FloatingDmxValue,
//     pub color4_wheel_random: FloatingDmxValue,
//     pub color4_wheel_audio: FloatingDmxValue,

//     pub color_add_r: FloatingDmxValue,
//     pub color_add_g: FloatingDmxValue,
//     pub color_add_b: FloatingDmxValue,
//     pub color_add_c: FloatingDmxValue,
//     pub color_add_m: FloatingDmxValue,
//     pub color_add_y: FloatingDmxValue,
//     pub color_add_ry: FloatingDmxValue,
//     pub color_add_gy: FloatingDmxValue,
//     pub color_add_gc: FloatingDmxValue,
//     pub color_add_bc: FloatingDmxValue,
//     pub color_add_bm: FloatingDmxValue,
//     pub color_add_rm: FloatingDmxValue,
//     pub color_add_w: FloatingDmxValue,
//     pub color_add_ww: FloatingDmxValue,
//     pub color_add_cw: FloatingDmxValue,
//     pub color_add_uv: FloatingDmxValue,
//     pub color_sub_r: FloatingDmxValue,
//     pub color_sub_g: FloatingDmxValue,
//     pub color_sub_b: FloatingDmxValue,
//     pub color_sub_c: FloatingDmxValue,
//     pub color_sub_m: FloatingDmxValue,
//     pub color_sub_y: FloatingDmxValue,

//     pub color_macro1: FloatingDmxValue,
//     pub color_macro1_rate: FloatingDmxValue,

//     pub color_macro2: FloatingDmxValue,
//     pub color_macro2_rate: FloatingDmxValue,

//     pub cto: FloatingDmxValue,
//     pub ctc: FloatingDmxValue,
//     pub ctb: FloatingDmxValue,
//     pub tint: FloatingDmxValue,
//     pub hsb_hue: FloatingDmxValue,
//     pub hsb_saturation: FloatingDmxValue,
//     pub hsb_brightness: FloatingDmxValue,
//     pub hsb_quality: FloatingDmxValue,
//     pub cie_x: FloatingDmxValue,
//     pub cie_y: FloatingDmxValue,
//     pub cie_brightness: FloatingDmxValue,
//     pub color_rgb_red: FloatingDmxValue,
//     pub color_rgb_green: FloatingDmxValue,
//     pub color_rgb_blue: FloatingDmxValue,
//     pub color_rgb_cyan: FloatingDmxValue,
//     pub color_rgb_magenta: FloatingDmxValue,
//     pub color_rgb_yellow: FloatingDmxValue,
//     pub color_rgb_quality: FloatingDmxValue,

//     pub video_boost_r: FloatingDmxValue,
//     pub video_boost_g: FloatingDmxValue,
//     pub video_boost_b: FloatingDmxValue,
//     pub video_hue_shift: FloatingDmxValue,
//     pub video_saturation: FloatingDmxValue,
//     pub video_brightness: FloatingDmxValue,
//     pub video_contrast: FloatingDmxValue,
//     pub video_key_color_r: FloatingDmxValue,
//     pub video_key_color_g: FloatingDmxValue,
//     pub video_key_color_b: FloatingDmxValue,
//     pub video_key_intensity: FloatingDmxValue,
//     pub video_key_tolerance: FloatingDmxValue,
// }

// #[derive(serde::Serialize, serde::Deserialize)]
// #[derive(Debug, Clone, Default)]
// pub struct BeamPreset {
//     pub strobe_duration: FloatingDmxValue,
//     pub strobe_rate: FloatingDmxValue,
//     pub strobe_frequency: FloatingDmxValue,
//     pub strobe_mode_shutter: FloatingDmxValue,
//     pub strobe_mode_strobe: FloatingDmxValue,
//     pub strobe_mode_pulse: FloatingDmxValue,
//     pub strobe_mode_pulse_open: FloatingDmxValue,
//     pub strobe_mode_pulse_close: FloatingDmxValue,
//     pub strobe_mode_random: FloatingDmxValue,
//     pub strobe_mode_random_pulse: FloatingDmxValue,
//     pub strobe_mode_random_pulse_open: FloatingDmxValue,
//     pub strobe_mode_random_pulse_close: FloatingDmxValue,
//     pub strobe_mode_effect: FloatingDmxValue,

//     pub shutter1: FloatingDmxValue,
//     pub shutter1_strobe: FloatingDmxValue,
//     pub shutter1_strobe_pulse: FloatingDmxValue,
//     pub shutter1_strobe_pulse_close: FloatingDmxValue,
//     pub shutter1_strobe_pulse_open: FloatingDmxValue,
//     pub shutter1_strobe_random: FloatingDmxValue,
//     pub shutter1_strobe_random_pulse: FloatingDmxValue,
//     pub shutter1_strobe_random_pulse_close: FloatingDmxValue,
//     pub shutter1_strobe_random_pulse_open: FloatingDmxValue,
//     pub shutter1_strobe_effect: FloatingDmxValue,

//     pub shutter2: FloatingDmxValue,
//     pub shutter2_strobe: FloatingDmxValue,
//     pub shutter2_strobe_pulse: FloatingDmxValue,
//     pub shutter2_strobe_pulse_close: FloatingDmxValue,
//     pub shutter2_strobe_pulse_open: FloatingDmxValue,
//     pub shutter2_strobe_random: FloatingDmxValue,
//     pub shutter2_strobe_random_pulse: FloatingDmxValue,
//     pub shutter2_strobe_random_pulse_close: FloatingDmxValue,
//     pub shutter2_strobe_random_pulse_open: FloatingDmxValue,
//     pub shutter2_strobe_effect: FloatingDmxValue,

//     pub shutter3: FloatingDmxValue,
//     pub shutter3_strobe: FloatingDmxValue,
//     pub shutter3_strobe_pulse: FloatingDmxValue,
//     pub shutter3_strobe_pulse_close: FloatingDmxValue,
//     pub shutter3_strobe_pulse_open: FloatingDmxValue,
//     pub shutter3_strobe_random: FloatingDmxValue,
//     pub shutter3_strobe_random_pulse: FloatingDmxValue,
//     pub shutter3_strobe_random_pulse_close: FloatingDmxValue,
//     pub shutter3_strobe_random_pulse_open: FloatingDmxValue,
//     pub shutter3_strobe_effect: FloatingDmxValue,

//     pub iris: FloatingDmxValue,
//     pub iris_strobe: FloatingDmxValue,
//     pub iris_strobe_random: FloatingDmxValue,
//     pub iris_pulse_close: FloatingDmxValue,
//     pub iris_pulse_open: FloatingDmxValue,
//     pub iris_random_pulse_close: FloatingDmxValue,
//     pub iris_random_pulse_open: FloatingDmxValue,

//     pub frost1: FloatingDmxValue,
//     pub frost1_pulse_open: FloatingDmxValue,
//     pub frost1_pulse_close: FloatingDmxValue,
//     pub frost1_ramp: FloatingDmxValue,

//     pub frost2: FloatingDmxValue,
//     pub frost2_pulse_open: FloatingDmxValue,
//     pub frost2_pulse_close: FloatingDmxValue,
//     pub frost2_ramp: FloatingDmxValue,

//     pub prism1: FloatingDmxValue,
//     pub prism1_select_spin: FloatingDmxValue,
//     pub prism1_macro: FloatingDmxValue,
//     pub prism1_pos: FloatingDmxValue,
//     pub prism1_pos_rotate: FloatingDmxValue,

//     pub prism2: FloatingDmxValue,
//     pub prism2_select_spin: FloatingDmxValue,
//     pub prism2_macro: FloatingDmxValue,
//     pub prism2_pos: FloatingDmxValue,
//     pub prism2_pos_rotate: FloatingDmxValue,

//     pub effects1: FloatingDmxValue,
//     pub effects1_rate: FloatingDmxValue,
//     pub effects1_fade: FloatingDmxValue,
//     pub effects1_adjust1: FloatingDmxValue,
//     pub effects1_adjust2: FloatingDmxValue,
//     pub effects1_pos: FloatingDmxValue,
//     pub effects1_pos_rotate: FloatingDmxValue,

//     pub effects2: FloatingDmxValue,
//     pub effects2_rate: FloatingDmxValue,
//     pub effects2_fade: FloatingDmxValue,
//     pub effects2_adjust1: FloatingDmxValue,
//     pub effects2_adjust2: FloatingDmxValue,
//     pub effects2_pos: FloatingDmxValue,
//     pub effects2_pos_rotate: FloatingDmxValue,

//     pub effects_sync: FloatingDmxValue,
//     pub beam_shaper: FloatingDmxValue,
//     pub beam_shaper_macro: FloatingDmxValue,
//     pub beam_shaper_pos: FloatingDmxValue,
//     pub beam_shaper_pos_rotate: FloatingDmxValue,
//     pub zoom: FloatingDmxValue,
//     pub zoom_mode_spot: FloatingDmxValue,
//     pub zoom_mode_beam: FloatingDmxValue,
// }
